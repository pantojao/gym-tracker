import type { NextPage } from "next";
import { useEffect, useState } from "react"
import Head from "next/head";
import { exec } from "child_process";

const CreateRoutine: NextPage = () => {
  const [exercises, setExercises] = useState<Exercise[]>([]);

  interface Exercise {
    name: string;
    sets: number;
    reps: number;
  };

  const createExercise = () => {
    const newExercise: Exercise = {
      name: "test",
      sets: 3,
      reps: 3
    }
    setExercises([...exercises, newExercise])
  }

  return (
    <>
      <Head>
        <title>Create Your Routines</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <nav className="mx-auto px-4 pt-6 w-3/4 lg:w-2/3 flex justify-end">
        <i className="fa-solid text-3xl fa-user duration-200 motion-safe:hover:scale-105"></i>
      </nav>

      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center px-4">
        <RoutineName />

        <div className="mt-3 flex flex-col pt-3 text-center md:grid-cols-3 lg:w-2/3">
          {exercises.map((exercise: Exercise) =>
            <ExerciseInput />
          )
          }
        </div>

        <div className="mt-20" onClick={() => createExercise()}>
          <i className="fa-solid fa-plus rounded-3xl text-white text-lg bg-blue-500 px-3 py-3 duration-200 motion-safe:hover:scale-105"></i>
        </div>
      </main>
    </>
  );
}

const ExerciseInput = () => {
  const [exerciseName, setExerciseName] = useState<string>("Exercise");
  const [isValidName, setIsValidName] = useState<boolean>(true);
  const [reps, setReps] = useState<number>(3)
  const [sets, setSets] = useState<number>(3)

  useEffect(() => {
    setIsValidName(exerciseName === "Exercise" ? true : false)
  }, [exerciseName])

  return (
    <div className="flex flex-row w-full justify-evenly pt-4">
        <input type="text"
          value={exerciseName}
          onChange={(event) => setExerciseName(event.target.value)}
          required
          aria-required="true"
          className={"py-2.5 text-md text-center font-bold text-gray-900 bg-transparent border-b-2 appearance-none focus:outline-none peer focus:ring-0 " + (isValidName ? "focus:border-green-600  border-green-600" : "focus:border-red-600  border-red-600")} placeholder=" " />

      <input type="number"
        value={reps}
        onChange={(event) => setReps(parseInt(event.target.value))}
        required
        className="py-2.5 text-md text-center font-bold text-gray-900 border-b-2 appearance-none focus:outline-none peer" placeholder=" " />

      <input type="number"
        value={sets}
        onChange={(event) => setSets(parseInt(event.target.value))}
        required
        className="py-2.5 text-md text-center font-bold text-gray-900 bg-transparent border-b-2 appearance-none focus:outline-none peer focus:ring-0 " placeholder=" " />
    </div>
  )

}

const RoutineName = () => {
  const [workoutName, setWorkoutName] = useState<string>("workout");
  const [isEditing, setIsEditing] = useState<boolean>(false);
  const [isValidName, setIsValidName] = useState<boolean>(true);

  useEffect(() => {
    setIsValidName(workoutName === "workout" ? true : false)
  }, [workoutName])

  return (
    <>
      {
        isEditing ?
          (
            <div>
              <div>
                <input type="text"
                  value={workoutName}
                  onChange={(event) => setWorkoutName(event.target.value)}
                  onBlur={(event) => setIsEditing(false)}
                  onSubmit={(event) => setIsEditing(false)}
                  required
                  aria-required="true"
                  className={"py-2.5 text-5xl text-center font-extrabold text-gray-900 bg-transparent border-b-2 appearance-none focus:outline-none peer focus:ring-0 " + (isValidName ? "focus:border-green-600  border-green-600" : "focus:border-red-600  border-red-600")} placeholder=" " />
              </div>
              {!isValidName && <p id="standard_error_help" className="mt-2 text-xs text-red-600 dark:text-red-400"><span className="font-medium">This Routine Already Exists!</span> </p>}
            </div>
          ) : (
            <h1 onClick={(event) => setIsEditing(true)} className="text-5xl font-extrabold leading-normal text-gray-700 md:text-[5rem]">
              {workoutName}
            </h1>
          )
      }
    </>
  );
};

export default CreateRoutine;